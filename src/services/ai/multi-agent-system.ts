// src/services/ai/multi-agent-system.ts
import OpenAI from 'openai';
import { imageGenerationService } from '@/services/media/image-generation.service';
import { imageStorageService } from '@/services/media/image-storage.service';
import { heygenVideoService } from '@/services/media/heygen-video.service';

// Import condicional do video service antigo para evitar erros se n√£o existir
let videoGenerationService: any;
try {
  videoGenerationService = require('@/services/media/video-generation.service').videoGenerationService;
} catch (e) {
  console.warn('Video generation service n√£o encontrado');
  videoGenerationService = null;
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface OnboardingData {
  niche: string;
  objective: string;
  platforms: string[];
  tone: string;
  autoPosting: string;
  audience?: string;
  audienceDetails?: any;
}

interface AgentResponse<T> {
  agent: string;
  result: T;
  tokensUsed: number;
  timestamp: Date;
}

// ==========================
// 1. STRATEGY AGENT
// ==========================
class StrategyAgent {
  private systemPrompt = `Tu √©s o Strategy Agent, especialista em criar estrat√©gias de marketing de conte√∫do. 
A tua √∫nica fun√ß√£o √© analisar o perfil do utilizador e criar uma estrat√©gia completa e personalizada.
Pensas como um estratega de marketing s√©nior com 10+ anos de experi√™ncia.`;

  async createStrategy(data: OnboardingData): Promise<AgentResponse<any>> {
    const prompt = `Cria uma estrat√©gia de conte√∫do completa para:
    
Neg√≥cio: ${data.niche}
P√∫blico-alvo: ${data.audience || 'N√£o especificado'}
${data.audienceDetails ? `Detalhes: ${JSON.stringify(data.audienceDetails)}` : ''}
Objetivo: ${data.objective}
Plataformas: ${data.platforms.join(', ')}
Tom de voz: ${data.tone}
Modo de publica√ß√£o: ${data.autoPosting}

Retorna JSON com:
{
  "contentPillars": [
    {
      "name": "Nome do pilar",
      "description": "O que publicar",
      "percentage": 30,
      "examples": ["exemplo 1", "exemplo 2"]
    }
  ],
  "formatMix": {
    "carousels": 40,
    "reels": 30,
    "single": 20,
    "stories": 10
  },
  "postingSchedule": {
    "bestDays": ["monday", "wednesday", "friday"],
    "bestTimes": ["09:00", "13:00", "19:00"],
    "reasoning": "Porqu√™ estes hor√°rios"
  },
  "hashtagStrategy": {
    "high": ["#hashtag1", "#hashtag2"],
    "medium": ["#hashtag3", "#hashtag4"],
    "niche": ["#hashtag5", "#hashtag6"]
  },
  "keyMetrics": ["m√©trica1", "m√©trica2", "m√©trica3"],
  "monthlyGoals": {
    "followers": 500,
    "engagement": 4.5,
    "reach": 10000
  }
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: this.systemPrompt },
        { role: 'user', content: prompt },
      ],
      temperature: 0.7,
      response_format: { type: 'json_object' },
    });

    return {
      agent: 'StrategyAgent',
      result: JSON.parse(completion.choices[0].message.content || '{}'),
      tokensUsed: completion.usage?.total_tokens || 0,
      timestamp: new Date(),
    };
  }
}

// ==========================
// 2. CONTENT AGENT (ATUALIZADO: 2 IMAGENS + 1 REEL)
// ==========================
class ContentAgent {
  private systemPrompt = `Tu √©s o Content Agent, mestre em criar conte√∫do viral e envolvente.
Especializas-te em escrever captions que geram engagement, usando storytelling e psicologia.
Nunca crias conte√∫do gen√©rico - tudo √© personalizado e estrat√©gico.

IMPORTANTE - L√çNGUA PORTUGUESA DE PORTUGAL:
- SEMPRE usa "tu", "teu", "contigo" (NUNCA "voc√™", "seu", "consigo")
- Usa express√µes portuguesas: "fixe", "espetacular", "brutal", "top"
- Evita brasileirismos: NUNCA uses "voc√™", "legal", "bacana", "cara"
- Tom informal portugu√™s: "Ol√°!", "Vamos l√°", "Aten√ß√£o", "Experimenta"
- Exemplos CORRETOS PT-PT:
  ‚úÖ "Queres saber como...?" (n√£o "Voc√™ quer saber")
  ‚úÖ "Isto √© para ti" (n√£o "Isso √© para voc√™")
  ‚úÖ "O teu neg√≥cio" (n√£o "O seu neg√≥cio")
  ‚úÖ "V√™ isto" (n√£o "Veja isso")
  ‚úÖ "Partilha nos coment√°rios" (n√£o "Compartilhe nos coment√°rios")

CR√çTICO PARA IMAGENS - PARECER FOTOS REAIS, N√ÉO IA:
Quando crias imagePrompts, descreves como se fosses um fot√≥grafo a tirar uma foto REAL com smartphone:

‚úÖ SEMPRE incluir:
- "Real person" ou "Authentic moment"
- "Shot on iPhone" ou "smartphone photography"
- "Natural lighting" ou "window light"
- Ambiente espec√≠fico e realista (gym real, caf√© real, escrit√≥rio real)
- "Candid photo" ou "lifestyle photography"
- Imperfei√ß√µes naturais: "natural skin texture", "casual pose"

‚ùå NUNCA mencionar:
- "Perfect", "flawless", "ideal", "model-like"
- "Studio lighting", "professional setup"
- "Illustration", "design", "graphic", "render"
- "Dramatic lighting", "cinematic"
- "Beauty filter", "airbrushed"

EXEMPLOS CORRETOS (parecem fotos reais):
‚úÖ "Real Portuguese personal trainer in authentic gym, shot on iPhone 15, natural overhead lighting, casual workout clothes, candid moment during training session, natural skin texture, relaxed expression, real fitness environment with equipment in background"
‚úÖ "Authentic lifestyle photo of real person working on laptop in modern Lisbon cafe, smartphone photography, natural window light, everyday clothes, genuine concentration, slightly grainy, unposed moment, real coffee cup on table"
‚úÖ "Real entrepreneur in casual home office, shot with phone camera, natural daylight from window, wearing comfortable clothing, authentic workspace with slight mess, candid expression, real life setting"

EXEMPLOS ERRADOS (parecem IA):
‚ùå "Perfect model in professional gym studio with dramatic lighting"
‚ùå "Flawless fitness professional in ideal setting"
‚ùå "Beautiful illustration of trainer with perfect posture"`;

  async generateInitialPosts(
    data: OnboardingData,
    strategy: any
  ): Promise<AgentResponse<any>> {
    const prompt = `Cria 3 posts iniciais COMPLETOS para come√ßar:

Contexto:
- Nicho: ${data.niche}
- Objetivo: ${data.objective}
- Tom: ${data.tone}
- Plataforma principal: ${data.platforms[0]}
- Pilares de conte√∫do: ${strategy.contentPillars.map((p: any) => p.name).join(', ')}

‚ö†Ô∏è CR√çTICO - PORTUGU√äS DE PORTUGAL (PT-PT):
TODAS as captions, hooks e CTAs DEVEM ser em PORTUGU√äS DE PORTUGAL:
- Usa "tu", "teu", "contigo" (NUNCA "voc√™", "seu")
- Usa "partilhar" (n√£o "compartilhar")
- Usa "telem√≥vel" (n√£o "celular")
- Usa "fixe", "brutal", "espetacular" (n√£o "legal", "bacana")
- Tom direto e informal portugu√™s: "Ol√°!", "V√™ isto", "Experimenta", "Aten√ß√£o"

EXEMPLOS DE TEXTO PT-PT:
‚úÖ "Queres saber o segredo? V√™ aqui üëá"
‚úÖ "Isto mudou completamente o meu neg√≥cio"
‚úÖ "3 erros que TODOS cometem (e tu provavelmente tamb√©m)"
‚úÖ "Partilha isto com algu√©m que precisa"
‚úÖ "Deixa um ‚ù§Ô∏è se concordas"

‚ùå NUNCA:
"Voc√™ quer saber?" 
"Isso mudou..."
"Compartilhe com algu√©m"
"Deixe um coment√°rio"

IMPORTANTE: Cria EXATAMENTE nesta ordem:
1. POST COM IMAGEM (educativo - ensina algo valioso)
2. POST COM IMAGEM (viral - entretenimento/relatable)
3. REEL COM V√çDEO (vendas/CTA - converte)

SUPER CR√çTICO - IMAGENS DEVEM PARECER FOTOS REAIS, N√ÉO IA:

Para cada imagePrompt (posts 1 e 2), segue esta F√ìRMULA EXATA:

"Real [pessoa portuguesa relevante ao nicho] in [local espec√≠fico real], shot on iPhone 15, natural [tipo de luz], wearing [roupa casual real], [a√ß√£o natural/candid], natural skin texture, relaxed/genuine expression, slightly grainy, unposed moment, real [ambiente] with [detalhes reais]"

EXEMPLOS PERFEITOS por nicho:

FITNESS/TREINO:
‚úÖ "Real Portuguese fitness enthusiast in authentic local gym, shot on iPhone 15, natural overhead gym lighting, wearing everyday workout clothes, candid moment mid-exercise, natural skin texture with slight sweat, relaxed concentration, slightly grainy, unposed training moment, real gym environment with equipment and mirrors"

NEG√ìCIOS/EMPREENDEDORISMO:
‚úÖ "Real Portuguese entrepreneur working on laptop in casual Lisbon cafe, shot on iPhone 15 Pro, natural window daylight, wearing comfortable everyday clothes, genuine concentration on screen, natural skin texture, candid working moment, slightly grainy, real coffee shop atmosphere with people in soft background"

BELEZA/EST√âTICA:
‚úÖ "Real person applying skincare in authentic bathroom, shot with smartphone camera, natural bathroom lighting, wearing casual home clothes, candid self-care moment, natural skin texture visible, relaxed expression, everyday setting, real bathroom counter with products"

COMIDA/RESTAURANTE:
‚úÖ "Real Portuguese chef cooking in authentic kitchen, shot on iPhone, natural kitchen lighting, wearing comfortable chef attire, candid moment while preparing food, natural expression, slightly grainy, real restaurant kitchen with cooking equipment and ingredients"

CONSULTOR/COACH:
‚úÖ "Real professional during casual consulting session in authentic office space, shot on smartphone, natural daylight from windows, business casual attire, genuine interaction moment, natural skin texture, relaxed professional demeanor, slightly grainy, real office with desk and materials"

‚ùå O QUE NUNCA FAZER:
- "Perfect model with flawless skin"
- "Professional photography with studio lighting"
- "Cinematic portrait with dramatic background"
- "Beautiful illustration of ideal scenario"

Para o REEL (post 3), cria um script de 30-45 segundos para talking head EM PT-PT.

Formato JSON:
{
  "posts": [
    {
      "type": "educational",
      "mediaType": "image",
      "hook": "Frase de abertura impactante EM PT-PT (usa TU, n√£o VOC√ä)",
      "caption": "Caption completa com storytelling EM PT-PT (TU, TEU, CONTIGO)",
      "hashtags": ["#tag1", "#tag2", "#tag3"],
      "cta": "Call to action EM PT-PT (Partilha, Comenta, Deixa)",
      "imagePrompt": "PROMPT SEGUINDO F√ìRMULA ACIMA - FOTO REAL COM IPHONE",
      "estimatedEngagement": "alto/m√©dio/baixo",
      "bestTimeToPost": "09:00"
    },
    {
      "type": "viral",
      "mediaType": "image",
      "hook": "Hook viral e relatable EM PT-PT",
      "caption": "Caption com storytelling emocional EM PT-PT",
      "hashtags": ["#tag1", "#tag2"],
      "cta": "Coment√°rio ou partilha EM PT-PT",
      "imagePrompt": "PROMPT SEGUINDO F√ìRMULA ACIMA - MOMENTO AUT√äNTICO",
      "estimatedEngagement": "alto",
      "bestTimeToPost": "13:00"
    },
    {
      "type": "sales",
      "mediaType": "reel",
      "hook": "Hook poderoso para v√≠deo EM PT-PT",
      "caption": "Caption que converte EM PT-PT",
      "hashtags": ["#reels", "#tag2"],
      "cta": "Link na bio / Envia DM (EM PT-PT)",
      "videoScript": "Script de 30-45s EM PT-PT: [Intro 5s] ‚Üí [Problema 10s] ‚Üí [Solu√ß√£o 15s] ‚Üí [CTA 10s]",
      "imagePrompt": "Thumbnail: Real Portuguese person in [contexto], shot on iPhone, natural lighting, casual authentic moment",
      "estimatedEngagement": "muito alto",
      "bestTimeToPost": "19:00"
    }
  ]
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: this.systemPrompt },
        { role: 'user', content: prompt },
      ],
      temperature: 0.8,
      response_format: { type: 'json_object' },
    });

    return {
      agent: 'ContentAgent',
      result: JSON.parse(completion.choices[0].message.content || '{}'),
      tokensUsed: completion.usage?.total_tokens || 0,
      timestamp: new Date(),
    };
  }

  async generateContentIdeas(
    data: OnboardingData,
    count: number = 10
  ): Promise<AgentResponse<any>> {
    const prompt = `Gera ${count} ideias de conte√∫do espec√≠ficas para:
    
Nicho: ${data.niche}
Objetivo: ${data.objective}
Tom: ${data.tone}

‚ö†Ô∏è IMPORTANTE: Todas as ideias em PORTUGU√äS DE PORTUGAL (PT-PT)
- Usa "tu", "teu" (nunca "voc√™", "seu")
- Tom informal portugu√™s

Cada ideia deve ter:
- T√≠tulo/Hook cativante EM PT-PT
- Tipo (carrossel/reel/post)
- Valor que entrega
- Dificuldade de criar (f√°cil/m√©dia/dif√≠cil)

JSON:
{
  "ideas": [
    {
      "title": "Como fazer X em 5 passos (EM PT-PT)",
      "type": "carousel",
      "value": "Ensina processo completo",
      "difficulty": "easy",
      "estimatedTime": "10min"
    }
  ]
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: this.systemPrompt },
        { role: 'user', content: prompt },
      ],
      temperature: 0.9,
      response_format: { type: 'json_object' },
    });

    return {
      agent: 'ContentAgent',
      result: JSON.parse(completion.choices[0].message.content || '{}'),
      tokensUsed: completion.usage?.total_tokens || 0,
      timestamp: new Date(),
    };
  }
}

// ==========================
// 3. ANALYSIS AGENT
// ==========================
class AnalysisAgent {
  private systemPrompt = `Tu √©s o Analysis Agent, expert em an√°lise de dados e otimiza√ß√£o.
Identificas padr√µes, oportunidades e d√°s recomenda√ß√µes baseadas em dados.
Pensas como um data scientist focado em growth.`;

  async analyzePerfectProfile(data: OnboardingData): Promise<AgentResponse<any>> {
    const prompt = `Analisa o perfil ideal para algu√©m em:

Nicho: ${data.niche}
Plataformas: ${data.platforms.join(', ')}
Objetivo: ${data.objective}

Retorna an√°lise completa em formato JSON:
{
  "profileOptimization": {
    "bioSuggestion": "Bio optimizada com emoji e CTA",
    "profilePicture": "Descri√ß√£o do que deve ter",
    "highlightCovers": ["Tema 1", "Tema 2", "Tema 3"],
    "linkInBio": "O que colocar no link"
  },
  "contentAesthetic": {
    "colorPalette": ["#hex1", "#hex2", "#hex3"],
    "visualStyle": "Descri√ß√£o do estilo visual",
    "fontStyle": "clean/bold/playful"
  },
  "competitorInsights": {
    "whatWorksInNiche": ["insight 1", "insight 2"],
    "gapsToExploit": ["oportunidade 1", "oportunidade 2"],
    "avoidMistakes": ["erro comum 1", "erro comum 2"]
  }
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: this.systemPrompt },
        { role: 'user', content: prompt },
      ],
      temperature: 0.6,
      response_format: { type: 'json_object' },
    });

    return {
      agent: 'AnalysisAgent',
      result: JSON.parse(completion.choices[0].message.content || '{}'),
      tokensUsed: completion.usage?.total_tokens || 0,
      timestamp: new Date(),
    };
  }
}

// ==========================
// 4. SCHEDULING AGENT
// ==========================
class SchedulingAgent {
  private systemPrompt = `Tu √©s o Scheduling Agent, especialista em timing e calend√°rios de conte√∫do.
Optimizas quando publicar baseado em audi√™ncia, algoritmo e comportamento.`;

  async createWeeklyCalendar(
    data: OnboardingData,
    strategy: any,
    contentIdeas: any
  ): Promise<AgentResponse<any>> {
    const frequencyMap: any = {
      full_auto: 7,
      semi_auto: 5,
      creative_assist: 3,
      strategy_only: 0,
    };
    const postsPerWeek = frequencyMap[data.autoPosting] || 3;

    const prompt = `Cria um calend√°rio semanal detalhado em formato JSON:

Frequ√™ncia: ${postsPerWeek} posts/semana
Modo: ${data.autoPosting}
Plataformas: ${data.platforms.join(', ')}
Melhores hor√°rios: ${strategy.postingSchedule.bestTimes.join(', ')}
Ideias dispon√≠veis: ${contentIdeas.ideas.length}

Distribui os posts pela semana de forma estrat√©gica.

JSON:
{
  "weeklyCalendar": [
    {
      "day": "monday",
      "date": "2024-01-15",
      "posts": [
        {
          "time": "09:00",
          "platform": "instagram",
          "contentType": "carousel",
          "topic": "T√≠tulo do post",
          "pillar": "Nome do pilar",
          "priority": "high"
        }
      ]
    }
  ],
  "weeklyGoals": {
    "totalPosts": 5,
    "estimatedReach": 5000,
    "focusMetric": "engagement"
  }
}`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: this.systemPrompt },
        { role: 'user', content: prompt },
      ],
      temperature: 0.5,
      response_format: { type: 'json_object' },
    });

    return {
      agent: 'SchedulingAgent',
      result: JSON.parse(completion.choices[0].message.content || '{}'),
      tokensUsed: completion.usage?.total_tokens || 0,
      timestamp: new Date(),
    };
  }
}

// ==========================
// 5. VISUAL AGENT (ATUALIZADO: SUPORTE A IMAGENS + V√çDEOS)
// ==========================
class VisualAgent {
  private systemPrompt = `Tu √©s o Visual Agent, especialista em criar estrat√©gias visuais profissionais.
√âs expert em:
- Criar prompts detalhados para gera√ß√£o de imagens por IA
- Garantir consist√™ncia visual da marca
- Otimizar imagens para engajamento em redes sociais
- Criar texto leg√≠vel e impactante em imagens
- Escolher o estilo visual ideal para cada tipo de conte√∫do
- Garantir persist√™ncia permanente das imagens geradas
- Gerar v√≠deos com HeyGen para reels

Pensas como um diretor de arte com 10+ anos de experi√™ncia em social media.`;

  /**
   * Gera IMAGENS + V√çDEOS para os posts (2 fotos + 1 reel)
   */
  async generateMediaForPosts(
    posts: any[],
    userId: string,
    businessContext: {
      niche: string;
      audience?: string;
      tone: string;
    }
  ): Promise<AgentResponse<any>> {
    console.log(`üé® Visual Agent a gerar media para ${posts.length} posts...`);
    console.log('üìã Mix: 2 Imagens + 1 Reel (v√≠deo HeyGen)');
    
    // ‚úÖ Garantir que o bucket existe
    await imageStorageService.ensureBucketExists();
    console.log('‚úÖ Storage configurado e pronto');
    
    const mediaGenerated = [];
    let totalTokens = 0;

    for (let i = 0; i < posts.length; i++) {
      const post = posts[i];
      
      try {
        console.log(`\nüé¨ Gerando media ${i + 1}/${posts.length}: ${post.mediaType || 'image'}`);

        if (post.mediaType === 'reel' || post.type === 'sales') {
          // POST 3: GERAR V√çDEO COM HEYGEN üé•
          console.log('üé• Gerando REEL com HeyGen...');
          
          const video = await heygenVideoService.generateVideoWithAvatar({
            script: post.videoScript || post.caption,
            aspectRatio: '9:16',
            background: '#FFFFFF',
          });

          // TODO: Guardar v√≠deo tamb√©m (opcional, HeyGen j√° hospeda)
          
          mediaGenerated.push({
            postType: post.type,
            mediaType: 'video',
            videoUrl: video.videoUrl,
            thumbnailUrl: video.thumbnailUrl,
            duration: video.duration,
            videoScript: post.videoScript,
            hasText: false,
          });

          console.log(`‚úÖ Reel gerado: ${video.videoUrl}`);
        } else {
          // POSTS 1 e 2: GERAR IMAGENS üì∏
          console.log('üñºÔ∏è Gerando IMAGEM...');
          
          const shouldIncludeText = this.shouldIncludeTextInImage(post.type);
          
          // Gerar imagem tempor√°ria
          const temporaryUrl = await imageGenerationService.generateImage({
            prompt: post.imagePrompt,
            style: this.selectStyleForPost(post.type, businessContext.tone),
            aspectRatio: '1:1',
          });

          console.log(`üì• Imagem tempor√°ria gerada, a guardar permanentemente...`);

          // Guardar permanentemente
          const saved = await imageStorageService.saveImagePermanently(
            temporaryUrl,
            userId,
            `post-${post.type}-${i + 1}`
          );

          console.log(`‚úÖ Imagem ${i + 1} guardada: ${saved.publicUrl}`);

          mediaGenerated.push({
            postType: post.type,
            mediaType: 'image',
            imageUrl: saved.publicUrl,
            temporaryImageUrl: temporaryUrl,
            imagePath: saved.path,
            imagePrompt: post.imagePrompt,
            hasText: shouldIncludeText,
            storageBucket: saved.bucket,
          });
        }
        
        // Delay para evitar rate limits
        if (i < posts.length - 1) {
          console.log('‚è≥ Aguardando 3s...');
          await new Promise((resolve) => setTimeout(resolve, 3000));
        }
      } catch (error) {
        console.error(`‚ùå Erro ao gerar media para post ${post.type}:`, error);
        
        // Fallback
        if (post.mediaType === 'reel' || post.type === 'sales') {
          mediaGenerated.push({
            postType: post.type,
            mediaType: 'video',
            videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4',
            thumbnailUrl: 'https://via.placeholder.com/1080x1920',
            duration: 30,
            error: true,
          });
        } else {
          mediaGenerated.push({
            postType: post.type,
            mediaType: 'image',
            imageUrl: `https://via.placeholder.com/1080x1080/3B82F6/FFFFFF?text=${post.type}`,
            imagePrompt: post.imagePrompt,
            hasText: false,
            error: true,
          });
        }
      }
    }

    console.log(`‚úÖ Visual Agent: ${mediaGenerated.length} media gerados!`);
    console.log(`üì∏ Imagens: ${mediaGenerated.filter(m => m.mediaType === 'image').length}`);
    console.log(`üé¨ V√≠deos: ${mediaGenerated.filter(m => m.mediaType === 'video').length}`);

    return {
      agent: 'VisualAgent',
      result: {
        media: mediaGenerated,
        visualStrategy: await this.createVisualStrategy(businessContext),
        storageInfo: {
          bucket: 'content-images',
          totalMedia: mediaGenerated.length,
          successfulUploads: mediaGenerated.filter(m => !m.error).length,
        },
      },
      tokensUsed: totalTokens,
      timestamp: new Date(),
    };
  }

  // TODOS OS M√âTODOS PRIVADOS DO TEU C√ìDIGO ORIGINAL
  private async createVisualStrategy(businessContext: any): Promise<any> {
    const prompt = `Cria uma estrat√©gia visual completa para:

Neg√≥cio: ${businessContext.niche}
P√∫blico: ${businessContext.audience || 'Geral'}
Tom: ${businessContext.tone}

Retorna estrat√©gia em JSON:
{
  "colorPalette": {
    "primary": "#hex",
    "secondary": "#hex",
    "accent": "#hex",
    "reasoning": "Porqu√™ estas cores"
  },
  "visualStyle": {
    "overall": "minimalist/vibrant/professional/authentic",
    "photography": "descri√ß√£o do estilo fotogr√°fico",
    "typography": "clean/bold/elegant",
    "filters": "sugest√µes de filtros"
  },
  "contentGuidelines": {
    "do": ["diretriz 1", "diretriz 2"],
    "dont": ["evitar 1", "evitar 2"]
  },
  "templateSuggestions": [
    {
      "type": "carousel_education",
      "layout": "descri√ß√£o do layout",
      "useCase": "quando usar"
    }
  ]
}`;

    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4-turbo-preview',
        messages: [
          { role: 'system', content: this.systemPrompt },
          { role: 'user', content: prompt },
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' },
      });

      return JSON.parse(completion.choices[0].message.content || '{}');
    } catch (error) {
      console.error('Erro ao criar estrat√©gia visual:', error);
      return this.getDefaultVisualStrategy();
    }
  }

  private shouldIncludeTextInImage(postType: string): boolean {
    const typesWithText = ['educational', 'announcement', 'promotional', 'tip'];
    return typesWithText.includes(postType.toLowerCase());
  }

  private extractBusinessType(niche: string): string {
    const businessTypes: Record<string, string[]> = {
      fitness: ['fitness', 'gym', 'workout', 'personal trainer', 'yoga'],
      food: ['restaurant', 'food', 'chef', 'catering', 'bakery'],
      fashion: ['fashion', 'clothing', 'boutique', 'style', 'designer'],
      beauty: ['beauty', 'makeup', 'skincare', 'cosmetics', 'salon'],
      tech: ['tech', 'software', 'app', 'saas', 'startup'],
      coaching: ['coach', 'consulting', 'mentor', 'advisor'],
    };

    const nicheLower = niche.toLowerCase();
    for (const [type, keywords] of Object.entries(businessTypes)) {
      if (keywords.some((keyword) => nicheLower.includes(keyword))) {
        return type;
      }
    }

    return 'professional';
  }

  private mapPostTypeToGoal(postType: string): string {
    const goalMap: Record<string, string> = {
      educational: 'educa√ß√£o',
      viral: 'engagement',
      sales: 'convers√£o',
      promotional: 'convers√£o',
      behind_scenes: 'autenticidade',
      testimonial: 'prova social',
    };

    return goalMap[postType.toLowerCase()] || 'engagement';
  }

  private selectStyleForPost(postType: string, tone: string): 'professional' | 'vibrant' | 'minimalist' | 'realistic' | 'illustration' {
    // Mapeia tons para estilos v√°lidos do ImageGenerationService
    const toneStyleMap: Record<string, 'professional' | 'vibrant' | 'minimalist' | 'realistic' | 'illustration'> = {
      professional: 'professional',
      casual: 'realistic',        // authentic ‚Üí realistic
      energetic: 'vibrant',
      elegant: 'professional',    // luxury ‚Üí professional
      minimal: 'minimalist',
      bold: 'vibrant',
      authentic: 'realistic',
      luxury: 'professional',
    };

    const baseStyle = toneStyleMap[tone.toLowerCase()] || 'professional';

    // Prioridade por tipo de post
    if (postType === 'viral' || postType === 'entertainment') {
      return 'vibrant';
    }
    if (postType === 'sales' || postType === 'promotional') {
      return 'professional';
    }
    if (postType === 'educational') {
      return 'realistic';  // Educativo = fotos realistas
    }

    return baseStyle;
  }

  private extractMainText(text: string): string {
    const words = text.split(' ').slice(0, 3).join(' ');
    return words.length > 25 ? words.substring(0, 22) + '...' : words;
  }

  private getDefaultVisualStrategy(): any {
    return {
      colorPalette: {
        primary: '#3B82F6',
        secondary: '#8B5CF6',
        accent: '#F59E0B',
        reasoning: 'Cores vibrantes e modernas para social media',
      },
      visualStyle: {
        overall: 'professional',
        photography: 'Clean, well-lit, modern aesthetic',
        typography: 'Bold and readable',
        filters: 'Subtle brightness and contrast enhancement',
      },
      contentGuidelines: {
        do: ['Use high-quality images', 'Maintain brand colors', 'Keep text minimal'],
        dont: ['Use low-resolution images', 'Overcrowd with text', 'Use inconsistent styles'],
      },
      templateSuggestions: [],
    };
  }
}

// ==========================
// ORCHESTRATOR FINAL
// ==========================
export class AIOrchestrator {
  private strategyAgent: StrategyAgent;
  private contentAgent: ContentAgent;
  private analysisAgent: AnalysisAgent;
  private schedulingAgent: SchedulingAgent;
  private visualAgent: VisualAgent;

  constructor() {
    this.strategyAgent = new StrategyAgent();
    this.contentAgent = new ContentAgent();
    this.analysisAgent = new AnalysisAgent();
    this.schedulingAgent = new SchedulingAgent();
    this.visualAgent = new VisualAgent();
  }

  async processOnboarding(data: OnboardingData, userId: string) {
    console.log('ü§ñ Multi-Agent System iniciado...');
    console.log('üë• Agentes: Strategy, Content, Visual (2 imgs + 1 v√≠deo!), Analysis, Scheduling');

    // Fase 1: Strategy Agent
    console.log('üìä Strategy Agent a trabalhar...');
    const strategy = await this.strategyAgent.createStrategy(data);

    // Fase 2: Content Agent (gera 2 posts com imagem + 1 reel)
    console.log('‚úçÔ∏è Content Agent a gerar 3 posts (2 imgs + 1 reel)...');
    const [initialPosts, contentIdeas] = await Promise.all([
      this.contentAgent.generateInitialPosts(data, strategy.result),
      this.contentAgent.generateContentIdeas(data, 10),
    ]);

    // Fase 3: Visual Agent - GERA 2 IMAGENS + 1 V√çDEO HEYGEN! üé®üé¨
    console.log('üé®üé¨ Visual Agent a criar 2 imagens + 1 reel...');
    const visualContent = await this.visualAgent.generateMediaForPosts(
      initialPosts.result.posts,
      userId,
      {
        niche: data.niche,
        audience: data.audience,
        tone: data.tone,
      }
    );

    // Combinar posts com media gerada
    const postsWithMedia = initialPosts.result.posts.map((post: any, index: number) => ({
      ...post,
      // Se for v√≠deo
      ...(visualContent.result.media[index]?.mediaType === 'video' && {
        videoUrl: visualContent.result.media[index]?.videoUrl,
        thumbnailUrl: visualContent.result.media[index]?.thumbnailUrl,
        duration: visualContent.result.media[index]?.duration,
      }),
      // Se for imagem
      ...(visualContent.result.media[index]?.mediaType === 'image' && {
        imageUrl: visualContent.result.media[index]?.imageUrl,
        temporaryImageUrl: visualContent.result.media[index]?.temporaryImageUrl,
        imagePath: visualContent.result.media[index]?.imagePath,
      }),
      // Metadata comum
      mediaType: visualContent.result.media[index]?.mediaType,
      visualMetadata: visualContent.result.media[index],
    }));

    // Fase 4: Analysis Agent
    console.log('üîç Analysis Agent a analisar...');
    const profileAnalysis = await this.analysisAgent.analyzePerfectProfile(data);

    // Fase 5: Scheduling Agent
    console.log('üìÖ Scheduling Agent a criar calend√°rio...');
    const calendar = await this.schedulingAgent.createWeeklyCalendar(
      data,
      strategy.result,
      contentIdeas.result
    );

    const totalTokens =
      strategy.tokensUsed +
      initialPosts.tokensUsed +
      visualContent.tokensUsed +
      contentIdeas.tokensUsed +
      profileAnalysis.tokensUsed +
      calendar.tokensUsed;

    console.log('‚úÖ Multi-Agent System conclu√≠do!');
    console.log(`üí∞ Tokens totais: ${totalTokens}`);
    console.log(`üì∏ 2 Imagens geradas e guardadas permanentemente`);
    console.log(`üé¨ 1 Reel gerado com HeyGen`);

    return {
      strategy: strategy.result,
      initialPosts: postsWithMedia, // ‚Üê 2 COM IMAGENS + 1 COM V√çDEO!
      contentIdeas: contentIdeas.result.ideas,
      profileAnalysis: profileAnalysis.result,
      weeklyCalendar: calendar.result,
      visualStrategy: visualContent.result.visualStrategy,
      storageInfo: visualContent.result.storageInfo,
      metadata: {
        totalTokens,
        cost: (totalTokens / 1000) * 0.01,
        processingTime: new Date(),
        agents: [
          strategy.agent,
          initialPosts.agent,
          visualContent.agent,
          contentIdeas.agent,
          profileAnalysis.agent,
          calendar.agent,
        ],
      },
    };
  }
}