// prisma/schema.prisma - SQLite version

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  subscriptionTier String @default("free")
  subscriptionStatus String @default("active")
  stripeCustomerId String? @unique
  stripeSubscriptionId String? @unique

  accounts       SocialAccount[]
  posts          Post[]
  aiGenerations  AIGeneration[]
  auditReports   AuditReport[]
  teamMembership TeamMember[]
  ownedTeam      Team?           @relation("TeamOwner")
  onboarding     OnboardingResponse?
}

model Team {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members TeamMember[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String
  permissions String? // JSON as string
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  platformId   String
  username     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  
  followers    Int      @default(0)
  following    Int      @default(0)
  totalPosts   Int      @default(0)
  lastSyncAt   DateTime?
  
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
  analytics     PostAnalytics[]
  auditReports  AuditReport[]

  @@unique([userId, platform, platformId])
}

model Post {
  id              String     @id @default(cuid())
  userId          String
  socialAccountId String?
  
  type            String // EDUCATIONAL, VIRAL, SALES, ENGAGEMENT, SINGLE, CAROUSEL, VIDEO, REEL, STORY
  status          String @default("DRAFT") // DRAFT, SCHEDULED, PUBLISHING, PUBLISHED, FAILED
  
  caption         String    // ðŸ”§ ObrigatÃ³rio (sem ?)
  hashtags        String? // JSON array as string
  location        String?
  
  // Campos especÃ­ficos para posts gerados pela IA (Content Hub)
  hook                String? // Hook impactante do post
  cta                 String? // Call to action
  imagePrompt         String? // Prompt usado para gerar a imagem
  imageUrl            String? // ðŸ†• URL da imagem gerada
  estimatedEngagement String? // alto, mÃ©dio, baixo
  bestTimeToPost      String? // HH:MM formato 24h
  
  isAiGenerated   Boolean    @default(false)
  aiPrompt        String?
  
  mediaUrls       String? // JSON array as string
  thumbnailUrl    String?
  
  platform        String @default("INSTAGRAM") // ðŸ†• Plataforma de publicaÃ§Ã£o
  
  scheduledAt     DateTime?
  publishedAt     DateTime?
  
  platformPostId  String?
  platformData    String? // JSON as string
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount?    @relation(fields: [socialAccountId], references: [id])
  carousel        Carousel?
  video           Video?
  analytics       PostAnalytics[]
}

model Carousel {
  id         String   @id @default(cuid())
  postId     String   @unique
  templateId String?
  
  slides     String // JSON as string
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Video {
  id              String   @id @default(cuid())
  postId          String   @unique
  
  videoUrl        String
  thumbnailUrl    String
  duration        Int
  
  script          String?
  voiceoverId     String?
  musicTrackId    String?
  
  generationData  String? // JSON as string
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostAnalytics {
  id              String   @id @default(cuid())
  postId          String
  socialAccountId String
  
  views           Int      @default(0)
  likes           Int      @default(0)
  comments        Int      @default(0)
  shares          Int      @default(0)
  saves           Int      @default(0)
  
  engagementRate  Float    @default(0)
  reach           Int      @default(0)
  impressions     Int      @default(0)
  
  collectedAt     DateTime @default(now())

  post          Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
}

model Trend {
  id            String   @id @default(cuid())
  platform      String
  niche         String?
  
  topic         String
  description   String?
  trendingScore Float
  
  hashtags      String? // JSON array as string
  keywords      String? // JSON array as string
  
  soundUrl      String?
  soundName     String?
  
  metadata      String? // JSON as string
  
  expiresAt     DateTime
  createdAt     DateTime @default(now())
}

model AIGeneration {
  id        String   @id @default(cuid())
  userId    String
  
  type      String // TEXT, IMAGE, VIDEO, CAROUSEL, CAPTION
  prompt    String
  result    String // JSON as string
  
  model     String
  cost      Float    @default(0)
  tokensUsed Int?
  
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditReport {
  id              String   @id @default(cuid())
  userId          String
  socialAccountId String
  
  overallScore    Float
  
  insights        String // JSON as string
  
  createdAt       DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
}

model OnboardingResponse {
  id        String   @id @default(cuid())
  userId    String   @unique
  
  // Respostas das perguntas
  business              String
  businessDescription   String
  audience              String
  audienceDetails       String  // JSON {age, gender, location}
  objective             String
  instagram             String?
  
  // Instagram Analysis Report
  instagramReport       String? // JSON do relatÃ³rio completo
  instagramScore        Float?  @default(0)
  
  // EstratÃ©gia gerada pelos agentes
  strategy          String  // JSON completo
  initialPosts      String  // JSON array
  contentIdeas      String  // JSON array
  profileAnalysis   String  // JSON
  weeklyCalendar    String  // JSON
  
  // Metadata
  totalTokensUsed   Int     @default(0)
  generationCost    Float   @default(0)
  completedAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}